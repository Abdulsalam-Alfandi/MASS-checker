public class GrayCode {

	public static void main(String[] args) {
		GrayCode gc = new GrayCode(4);
		gc.print();
		System.out.println(gc.findCode("1001"));
	}

	private String[] code;

	/**
	 * The method getCode is the getter for the string array with all possible gray codes for a specific length.
	 * @return the string array with all possible gray codes for a specific length
	 */
	public String[] getCode() {
		return code;
	}

	/**
	 * The constructor GrayCode creates a new object with the type GrayCode.
	 * @param length is the length of the gray code
	 */
	public GrayCode(int length) {
		if (length == 1) {
			code = new String[] { "0", "1" };
		} else {
			code = new String[(int) Math.pow(2, length)];

			String[] temp = new GrayCode(length - 1).code;

			for (int i = 0; i < temp.length; i++) {
				code[i] = "0" + temp[i];
			}

			for (int i = 0; i < temp.length; i++) {
				code[temp.length + i] = "1" + temp[temp.length - 1 - i];
			}
		}
	}

	/**
	 * The method print prints all possible gray codes of this GrayCode for the given length to the console.
	 */
	public void print() {
		for (String s : code) {
			System.out.print(s + " ");
		}
		System.out.println();
	}

	/**
	 * The method findCode searches for a given code in a array with all possible codes.
	 * @param code is the code you would like to find
	 * @return the index of the given code in the array
	 */
	public int findCode(String code) {
		if (code.length() != this.code[0].length()) {
			return -1;
		}
		return findCodeHelp(code, 0, 0, this.code.length);
	}

	/**
	 * The method findCodeHelp is a help method for the method findCode to manage the search for the code in a recursive way.
	 * @param code is the code you would like to find
	 * @param posInCode is the position of the character in the code that should be used in the next step
	 * @param startInArray is the index of the first string in the array that is still valid
	 * @param endInArray is the index of the last string in the array that is still valid + 1
	 * @param rightDirection is true the method should work from left to right, false otherwise
	 * @return the index of the given code in the array
	 */
	private int findCodeHelp(String code, int posInCode, int startInArray, int endInArray) {
		if (code.length() - 1 == posInCode) {
			return code.charAt(posInCode) == this.code[startInArray].charAt(posInCode) ? startInArray : endInArray - 1;
		}

		if (this.code[startInArray].charAt(posInCode) == '0') { // 0 1
			if (code.charAt(posInCode) == '0') {
				return findCodeHelp(code, ++posInCode, startInArray, endInArray - (endInArray - startInArray) / 2);
			}
			return findCodeHelp(code, ++posInCode, startInArray + (endInArray - startInArray) / 2, endInArray);
		} else { // 1 0
			if (code.charAt(posInCode) == '1') {
				return findCodeHelp(code, ++posInCode, startInArray, endInArray - (endInArray - startInArray) / 2);
			}
			return findCodeHelp(code, ++posInCode, startInArray + (endInArray - startInArray) / 2, endInArray);
		}
	}
}