import java.util.Calendar;
import java.util.Calendar.Builder;

import de.uni.marburg.oop.notifications.NotificationCenter;

public class Utils {

	public static void main(String[] args) {
		NotificationCenter.showMessage("Toss Coin", tossCoin());

		Builder a = new Builder();
		a.setDate(2018, 11, 29);
		a.setTimeOfDay(7, 0, 0);

		Builder b = new Builder();
		b.setDate(2018, 11, 29);
		b.setTimeOfDay(8, 30, 0);

		NotificationCenter.showMessage("Time Difference",
				"Time a: 7 o'clock\nTime b: half past 8\n" + getTimeDifference(a.build(), b.build()));

		b.setTimeOfDay(8, 29, 0);

		NotificationCenter.showMessage("Time Difference",
				"Time a: 7 o'clock\nTime b: 29 minutes past 8\n" + getTimeDifference(a.build(), b.build()));

		NotificationCenter.showMessage("Equated Monthly Installment",
				"Rate of interest: 5%\nRunning time: 24 payments\nLoan: 30000\n" + emi(0.05, 24, 30000));
	}

	/**
	 * The method tossCoin simulates throwing up a coin.
	 * @return Kopf or Zahl
	 */
	public static String tossCoin() {
		return Math.random() < 0.5 ? "Kopf" : "Zahl";
	}

	/**
	 * The method getTimeDifference calculates the hours between two dates and times of those days.
	 * If the difference is greater than 29:59 minutes the hour is increased.
	 * @param a is the first date and time
	 * @param b is the second date and time
	 * @return the hours between those two dates and times rounded to a full hour
	 */
	public static int getTimeDifference(Calendar a, Calendar b) {
		return (int) Math.round(Math.abs(b.getTimeInMillis() - a.getTimeInMillis()) / 3600000.0);
	}

	/**
	 * The method emi calculates the installments you have to expect for a given rate of interest, the amount of payments and the loan.
	 * @param interest is the rate of interest
	 * @param payments is the amount of payments
	 * @param loan is the loan
	 * @return how much money you have to pay with each payment
	 */
	public static int emi(double interest, int payments, int loan) {
		return (int) (loan * (interest * Math.pow(1 + interest, payments) / (Math.pow(1 + interest, payments) - 1)));
	}
}