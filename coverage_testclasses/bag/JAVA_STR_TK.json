{
   "answer": "package adt;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\n\npublic class Bag {\n\n\t// Internal invariant\n\t// @inv elementen.size() >= 0\n\tprivate ArrayList<Integer> elements;\n\n\t// Attribute is used for testing the student's test\n\tprivate int attributeForStudentTestTest = 0;\n\n\t/**\n\t * @ensures A new bag is instantiated, with length = 0.\n\t */\n\tpublic Bag() {\n\t\telements = new ArrayList<>(); // You have not created a new bag needed to test the class Bag.\n\t}\n\n\t/**\n\t * @ensures new cardinality = old cardinality + 1\n\t * @ensures the new length is the old length plus 1\n\t * @ensures returns true\n\t */\n\tpublic boolean add(int elem) {\n\t\tif (length() == 0) {\n\t\t\tattributeForStudentTestTest++; // Add method: You have not tested the add method with an empty bag.\n\t\t}\n\t\tif (length() > 0) {\n\t\t\tattributeForStudentTestTest++; // Add method: You have not tested the add method with a non empty bag.\n\t\t}\n\t\treturn elements.add(elem);\n\t}\n\n\t/**\n\t * @sub Happy-path {\n\t * @requires length > 0 and the bag contains n elements of elem, with n > 0\n\t * @ensures new cardinality(elem) = old cardinality(elem) - 1\n\t * @ensures length is old length minus 1\n\t * @ensures returns true }\n\t * @sub Non-happy-path {\n\t * @requires length = 0 or the bag does not contain element elem\n\t * @ensures the bag is not changed\n\t * @ensures length is old length\n\t * @ensures returns false }\n\t */\n\tpublic boolean remove(int elem) {\n\t\tif (length() > 0 && elements.contains(elem)) {\n\t\t\tattributeForStudentTestTest++; // Remove method: You have not tested the requirement `length > 0' and a bag\n\t\t\t\t\t\t\t\t\t\t\t// containing elem (happy-path scenario).\n\t\t}\n\t\tif (length() <= 0) {\n\t\t\tattributeForStudentTestTest++; // Remove method: You have not tested the requirement `length = 0' of the\n\t\t\t\t\t\t\t\t\t\t\t// non-happy-path.\n\t\t}\n\t\tif (!elements.contains(elem)) {\n\t\t\tattributeForStudentTestTest++; // Remove method: You have not tested the requirement `the bag does not\n\t\t\t\t\t\t\t\t\t\t\t// contain element elem' of the non-happy path.\n\t\t}\n\t\treturn elements.remove(Integer.valueOf(elem));\n\t}\n\n\t/**\n\t * @ensures returns the number of elements\n\t */\n\tpublic int length() {\n\t\treturn elements.size();\n\t}\n\n\t/**\n\t * @ensures true if they contain the same elements otherwise false\n\t */\n\tpublic boolean equals(Object obj) {\n\t\tif (length() == 0) {\n\t\t\tattributeForStudentTestTest++; // Equals method: You have not tested the equals method with an empty bag as\n\t\t\t\t\t\t\t\t\t\t\t// this.\n\t\t}\n\t\tif (((Bag) obj).length() == 0) {\n\t\t\tattributeForStudentTestTest++; // Equals method: You have not tested the equals method with an empty bag as\n\t\t\t\t\t\t\t\t\t\t\t// parameter.\n\t\t}\n\t\tif (length() > 0) {\n\t\t\tattributeForStudentTestTest++; // Equals method: You have not tested the equals method with an non-empty bag\n\t\t\t\t\t\t\t\t\t\t\t// as this.\n\t\t}\n\t\tif (((Bag) obj).length() > 0) {\n\t\t\tattributeForStudentTestTest++; // Equals method: You have not tested the equals method with an non-empty bag\n\t\t\t\t\t\t\t\t\t\t\t// as parameter.\n\t\t}\n\t\tif (length() == ((Bag) obj).length()) {\n\t\t\tattributeForStudentTestTest++; // Equals method: You have not tested the equals method with two bags of\n\t\t\t\t\t\t\t\t\t\t\t// equal length.\n\t\t}\n\t\tif (length() != ((Bag) obj).length()) {\n\t\t\tattributeForStudentTestTest++; // Equals method: You have not tested the equals method with two bags of\n\t\t\t\t\t\t\t\t\t\t\t// unequal length.\n\t\t}\n\t\tif (!(obj instanceof Bag)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.length() != ((Bag) obj).length()) {\n\t\t\treturn false;\n\t\t}\n\t\tint[] elems1 = this.getElems();\n\t\tint[] elems2 = ((Bag) obj).getElems();\n\t\tArrays.sort(elems1);\n\t\tArrays.sort(elems2);\n\t\treturn Arrays.equals(elems1, elems2);\n\t}\n\n\t/**\n\t * @ensures returns the elements in the bag\n\t */\n\tpublic int[] getElems() {\n\t\tint[] elems = new int[elements.size()];\n\t\tfor (int i = 0; i < elements.size(); i++) {\n\t\t\telems[i] = elements.get(i);\n\t\t}\n\t\treturn elems;\n\t}\n\n\t/**\n\t * @ensures returns the number of elem in the bag\n\t */\n\tpublic int cardinality(int elem) {\n\t\tif (length() == 0) {\n\t\t\tattributeForStudentTestTest++; // Method cardinality: You have not tested with an empty bag.\n\t\t}\n\t\tif (length() != 0 && Collections.frequency(elements, elem) == 0) {\n\t\t\tattributeForStudentTestTest++; // Method cardinality: You have not tested with non-empty bag and cardinality\n\t\t\t\t\t\t\t\t\t\t\t// zero.\n\t\t}\n\t\tif (length() != 0 && Collections.frequency(elements, elem) > 0) {\n\t\t\tattributeForStudentTestTest++; // Method cardinality: You have not tested with non-empty bag and cardinality\n\t\t\t\t\t\t\t\t\t\t\t// > zero.\n\t\t}\n\t\treturn Collections.frequency(elements, elem);\n\t}\n\n}",
   "feedback":[],
   "checkerClass":"eu.qped.java.checkers.mass.Mass",
   "mass":{
      "coverage": {
         "privateImplementation": "file:./coverage_testclasses/bag/T_JAVA.zip",
         "excludeByTypeSet" : [],
         "excludeBYNameSet" : [],
         "format" : "",
         "feedback" : ["Bag:CUSTOM:19:You have not created a new bag needed to test the class Bag.", "Bag:CUSTOM:29:Add method: You have not tested the add method with an empty bag.", "Bag:CUSTOM:32:Add method: You have not tested the add method with a non empty bag.", "Bag:CUSTOM:51:Remove method: You have not tested the requirement 'length > 0' and a bag containing elem.", "Bag:CUSTOM:55:Remove method: You have not tested the requirement 'length = 0' of the non-happy-path.", "Bag:CUSTOM:59:Remove method: You have not tested the requirement 'the bag does not contain element elem' of the non-happy path.", "Bag:CUSTOM:77:Equals method: You have not tested the equals method with an empty bag as this.", "Bag:CUSTOM:81:Equals method: You have not tested the equals method with an empty bag as parameter.", "Bag:CUSTOM:85:Equals method: You have not tested the equals method with an non-empty bag as this.", "Bag:CUSTOM:89:Equals method: You have not tested the equals method with an non-empty bag as parameter.", "Bag:CUSTOM:93:Equals method: You have not tested the equals method with two bags of equal length.", "Bag:CUSTOM:97:Equals method: You have not tested the equals method with two bags of unequal length.", "Bag:CUSTOM:129:Method cardinality: You have not tested with an empty bag.", "Bag:CUSTOM:132:Method cardinality: You have not tested with non-empty bag and cardinality zero.", "Bag:CUSTOM:136:Method cardinality: You have not tested with non-empty bag and cardinality > zero."]
      },
      "coverageSelected": "true"
   }
}