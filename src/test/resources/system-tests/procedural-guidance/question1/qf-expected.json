{
	"answer": "package test;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\nimport java.util.Arrays;\r\n\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport collections.Bag;\r\n\r\nimport org.junit.Assert;\r\n\r\nclass TestBag {\r\n\r\n\t //Tests to implement\r\n\r\n}",
	"feedback": [
		"# Your Feedback\n",
		"## Coverage feedbacks",
		"Method cardinality: You have not tested the cardinality using an empty bag.",
		"Method remove: You have not tested the remove method at all.",
		"Method length: You have not tested the length of a non-empty bag.",
		"Method equals: You have not tested the equals method with null parameter.",
		"Equals method: You have not tested the equals method with an empty bag as parameter.",
		"Equals method: You have not tested the equals method with an empty bag as this. ",
		"Method cardinality: You have not tested the cardinality of a bag that contains the element more than once.",
		"Method getElements: You have not tested the getElems method at all.",
		"Method remove: You have not tested the add method with values that are added more than once.",
		"Method equals: You have not tested the equals method with a parameter not instance of Bag.",
		"Method getElements: You have not tested the getElems method with a non-empty bag.",
		"Method cardinality: You have not tested the cardinality of a bag that contains the element exactly once.",
		"Method add: You have not tested the add method at all.",
		"Method getElements: You have not tested the getElems method with an empty bag.",
		"Method add: You have not tested the add method with an empty bag.",
		"Equals method: You have not tested the equals method with two bags of equal length.",
		"Method length: You have not tested the length of an empty bag.",
		"Method equals: You have not tested the equals method at all.",
		"Method add: You have not tested the add method with an non-empty bag.",
		"Method cardinality: You have not tested the cardinality method at all.",
		"Remove method: You have not tested the requirement `the bag does not contain element elem' of the non-happy path.",
		"Method add: You have not tested the add method with values that are added more than once.",
		"Equals method: You have not tested the equals method with two bags of unequal length.",
		"Method cardinality: You have not tested the cardinality of a bag that does not contain the element.",
		"Equals method: You have not tested the equals method with an non-empty bag as this.",
		"Remove method: You have not tested the requirement `length = 0' of the non-happy-path.",
		"You have not created a new bag needed to test the class Bag.",
		"Equals method: You have not tested the equals method with an non-empty bag as parameter.",
		"Method length: You have not tested the length method at all.",
		"# Full Coverage Report\n\n## collections/Bag.java\n\n| Line | Coverage type | Code |\n| ---: | :------------ | ---- |\n| 1 | _EMPTY_ | `/***` |\n| 2 | _EMPTY_ | ` * elements.size() used instead of length() for coverage detection of own method length(). ` |\n| 3 | _EMPTY_ | ` * ` |\n| 4 | _EMPTY_ | ` * It can be determined that all needed happy paths and non happy paths are executed.` |\n| 5 | _EMPTY_ | ` * But, it is not possible to detect whether these path executions are part of an assert.` |\n| 6 | _EMPTY_ | ` * A method call can take place outside an assert method call.  ` |\n| 7 | _EMPTY_ | ` * ` |\n| 8 | _EMPTY_ | ` * If a method has not been tested at all, we give detailed information of all tests not performed.` |\n| 9 | _EMPTY_ | ` * It is better that we let them figure out for themselves what tests are needed.` |\n| 10 | _EMPTY_ | ` * ` |\n| 11 | _EMPTY_ | ` * We have to add test cases to test the internal invariant.` |\n| 12 | _EMPTY_ | ` */` |\n| 13 | _EMPTY_ |  |\n| 14 | _EMPTY_ |  |\n| 15 | _EMPTY_ |  |\n| 16 | _EMPTY_ | `package collections;` |\n| 17 | _EMPTY_ | `import java.util.ArrayList;` |\n| 18 | _EMPTY_ | `import java.util.Arrays;` |\n| 19 | _EMPTY_ | `import java.util.Collections;` |\n| 20 | _EMPTY_ |  |\n| 21 | _EMPTY_ | `/**` |\n| 22 | _EMPTY_ | ` * This class represents a bag of integers. A bag can contain duplicate elements.` |\n| 23 | _EMPTY_ | ` * The bag is not limited in the number of elements it can hold.` |\n| 24 | _EMPTY_ | ` * The number of elements in the bag is represented by its length.  ` |\n| 25 | _EMPTY_ |  |\n| 26 | _EMPTY_ | ` * External invariant:` |\n| 27 | _EMPTY_ | ` *   @inv Number of elements >= 0` |\n| 28 | _EMPTY_ | ` */` |\n| 29 | _EMPTY_ |  |\n| 30 | _EMPTY_ | `public class Bag {` |\n| 31 | _EMPTY_ | `  ` |\n| 32 | _EMPTY_ | `  // Internal invariant` |\n| 33 | _EMPTY_ | `  // @inv elementen.size() >= 0 ` |\n| 34 | _EMPTY_ | `  private ArrayList<Integer> elements;` |\n| 35 | _EMPTY_ | `  ` |\n| 36 | _EMPTY_ | `  // Attribute is used for testing the student's test ` |\n| 37 | **NOT covered** | `  private int attributeForStudentTestTest = 0;` |\n| 38 | _EMPTY_ | `  ` |\n| 39 | _EMPTY_ | `  /**` |\n| 40 | _EMPTY_ | `   *   @desc Constructor ` |\n| 41 | _EMPTY_ | `   *   @sub Happy path {` |\n| 42 | _EMPTY_ | `   *     @requires true` |\n| 43 | _EMPTY_ | `   *     @ensures A new bag is instantiated, with length = 0.  ` |\n| 44 | _EMPTY_ | `   *   }` |\n| 45 | _EMPTY_ | `   */` |\n| 46 | **NOT covered** | `   public Bag() {` |\n| 47 | **NOT covered** | `      elements = new ArrayList<>();     // You have not created a new bag needed to test the class Bag.` |\n| 48 | **NOT covered** | `  }` |\n| 49 | _EMPTY_ | `  ` |\n| 50 | _EMPTY_ | `  /**` |\n| 51 | _EMPTY_ | `   * @desc add an elem to the bag` |\n| 52 | _EMPTY_ | `   * @param elem the element to add ` |\n| 53 | _EMPTY_ | `   * @sub happy path {` |\n| 54 | _EMPTY_ | `   *   @requires true` |\n| 55 | _EMPTY_ | `   *   @ensures new cardinality(eleml) = old cardinality(elem) + 1` |\n| 56 | _EMPTY_ | `   *   @ensures the new length of the bag is the old length plus 1` |\n| 57 | _EMPTY_ | `   *   @ensures returns true ` |\n| 58 | _EMPTY_ | `   * }` |\n| 59 | _EMPTY_ | `   */` |\n| 60 | _EMPTY_ | `  public boolean add(int elem) {` |\n| 61 | **NOT covered** | `      attributeForStudentTestTest++;     // Method add: You have not tested the add method at all.` |\n| 62 | **NOT covered** | `      if (elements.size() == 0) {` |\n| 63 | **NOT covered** | `        attributeForStudentTestTest++;   // Method add: You have not tested the add method with an empty bag. ` |\n| 64 | _EMPTY_ | `      } else {` |\n| 65 | **NOT covered** | `          attributeForStudentTestTest++; // Method add: You have not tested the add method with an non-empty bag. ` |\n| 66 | _EMPTY_ | `      }` |\n| 67 | **NOT covered** | `      if (elements.contains(elem)) {` |\n| 68 | **NOT covered** | `        attributeForStudentTestTest++;   // Method add: You have not tested the add method with values that are added more than once.` |\n| 69 | _EMPTY_ | `      }` |\n| 70 | **NOT covered** | `      return elements.add(elem); ` |\n| 71 | _EMPTY_ | `  }` |\n| 72 | _EMPTY_ | `  ` |\n| 73 | _EMPTY_ | `  /**` |\n| 74 | _EMPTY_ | `   * @desc Remove elemet elem from the bag` |\n| 75 | _EMPTY_ | `   * @param elem the element to remove` |\n| 76 | _EMPTY_ | `   * @sub Happy-path {` |\n| 77 | _EMPTY_ | `   *   @requires length > 0 and the bag contains n elements of elem, with n > 0` |\n| 78 | _EMPTY_ | `   *   @ensures new cardinality(elem) = old cardinality(elem) - 1` |\n| 79 | _EMPTY_ | `   *   @ensures length is old length minus 1` |\n| 80 | _EMPTY_ | `   *   @ensures returns true` |\n| 81 | _EMPTY_ | `   * }` |\n| 82 | _EMPTY_ | `   * @sub Non-happy-path {` |\n| 83 | _EMPTY_ | `   *   @requires length = 0 or the bag does not contain element elem` |\n| 84 | _EMPTY_ | `   *   @ensures the bag is not changed` |\n| 85 | _EMPTY_ | `   *   @ensures length is old length` |\n| 86 | _EMPTY_ | `   *   @ensures returns false` |\n| 87 | _EMPTY_ | `   * }` |\n| 88 | _EMPTY_ | `   */` |\n| 89 | _EMPTY_ | `  public boolean remove(int elem) {` |\n| 90 | **NOT covered** | `      attributeForStudentTestTest++;       // Method remove: You have not tested the remove method at all.` |\n| 91 | **NOT covered** | `      if (elements.size() > 0  && elements.contains(elem)) {` |\n| 92 | **NOT covered** | `          attributeForStudentTestTest++;   // Remove method: You have not tested the requirement `length > 0' and a bag containing elem (happy-path scenario).          ` |\n| 93 | _EMPTY_ | `      }` |\n| 94 | **NOT covered** | `      if (elements.size() == 0) {` |\n| 95 | **NOT covered** | `          attributeForStudentTestTest++;   // Remove method: You have not tested the requirement `length = 0' of the non-happy-path.          ` |\n| 96 | _EMPTY_ | `      }` |\n| 97 | **NOT covered** | `      if (!elements.contains(elem)) {      ` |\n| 98 | **NOT covered** | `          attributeForStudentTestTest++;   // Remove method: You have not tested the requirement `the bag does not contain element elem' of the non-happy path. ` |\n| 99 | _EMPTY_ | `      }      ` |\n| 100 | **NOT covered** | `      return elements.remove(Integer.valueOf(elem));` |\n| 101 | _EMPTY_ | `  }` |\n| 102 | _EMPTY_ | `  ` |\n| 103 | _EMPTY_ | `  /**` |\n| 104 | _EMPTY_ | `   * @desc Return the number of elements in the bag` |\n| 105 | _EMPTY_ | `   * @sub {` |\n| 106 | _EMPTY_ | `   *   @requires true  ` |\n| 107 | _EMPTY_ | `   *   @ensures returns the number of elements` |\n| 108 | _EMPTY_ | `   * } ` |\n| 109 | _EMPTY_ | `   */` |\n| 110 | _EMPTY_ | `  public int length() {` |\n| 111 | **NOT covered** | `     attributeForStudentTestTest++;     // Method length: You have not tested the length method at all.` |\n| 112 | **NOT covered** | `     if (elements.size() == 0) {` |\n| 113 | **NOT covered** | `       attributeForStudentTestTest++;   // Method length: You have not tested the length of an empty bag.` |\n| 114 | _EMPTY_ | `     } else { ` |\n| 115 | **NOT covered** | `       attributeForStudentTestTest++;   // Method length: You have not tested the length of a non-empty bag.` |\n| 116 | _EMPTY_ | `     }` |\n| 117 | **NOT covered** | `     return elements.size();   ` |\n| 118 | _EMPTY_ | `  }  ` |\n| 119 | _EMPTY_ | `  ` |\n| 120 | _EMPTY_ | `  /**` |\n| 121 | _EMPTY_ | `   * @desc Determine if this bag contains exactly the same elements as bag obj.` |\n| 122 | _EMPTY_ | `   * @param obj the other bag ` |\n| 123 | _EMPTY_ | `   * @sub {` |\n| 124 | _EMPTY_ | `   *   @requires true` |\n| 125 | _EMPTY_ | `   *   @ensures true if they contain the same elements otherwise false` |\n| 126 | _EMPTY_ | `   * }   ` |\n| 127 | _EMPTY_ | `   */` |\n| 128 | _EMPTY_ | `  public boolean equals(Object obj) {` |\n| 129 | **NOT covered** | `    attributeForStudentTestTest++;      // Method equals: You have not tested the equals method at all.` |\n| 130 | **NOT covered** | `    if (obj == null) {` |\n| 131 | **NOT covered** | `        attributeForStudentTestTest++;  // Method equals: You have not tested the equals method with null parameter.` |\n| 132 | **NOT covered** | `        return false;` |\n| 133 | _EMPTY_ | `    }` |\n| 134 | **NOT covered** | `    if (!(obj instanceof Bag)) {` |\n| 135 | **NOT covered** | `        attributeForStudentTestTest++;  // Method equals: You have not tested the equals method with a parameter not instance of Bag.` |\n| 136 | **NOT covered** | `        return false;` |\n| 137 | _EMPTY_ | `        }` |\n| 138 | **NOT covered** | `    if (elements.size() == 0) {` |\n| 139 | **NOT covered** | `        attributeForStudentTestTest++;  // Equals method: You have not tested the equals method with an empty bag as this. ` |\n| 140 | _EMPTY_ | `    }` |\n| 141 | **NOT covered** | `    if (((Bag) obj).elements.size() == 0) {` |\n| 142 | **NOT covered** | `        attributeForStudentTestTest++;  // Equals method: You have not tested the equals method with an empty bag as parameter. ` |\n| 143 | _EMPTY_ | `    }` |\n| 144 | **NOT covered** | `    if (elements.size() > 0) {` |\n| 145 | **NOT covered** | `        attributeForStudentTestTest++;  // Equals method: You have not tested the equals method with an non-empty bag as this. ` |\n| 146 | _EMPTY_ | `    }` |\n| 147 | **NOT covered** | `    if (((Bag) obj).elements.size() > 0) {` |\n| 148 | **NOT covered** | `        attributeForStudentTestTest++;  // Equals method: You have not tested the equals method with an non-empty bag as parameter. ` |\n| 149 | _EMPTY_ | `    }` |\n| 150 | **NOT covered** | `    if (elements.size() == ((Bag) obj).elements.size()) {` |\n| 151 | **NOT covered** | `        attributeForStudentTestTest++;  // Equals method: You have not tested the equals method with two bags of equal length. ` |\n| 152 | _EMPTY_ | `    }` |\n| 153 | **NOT covered** | `    if (elements.size() != ((Bag) obj).elements.size()) {` |\n| 154 | **NOT covered** | `        attributeForStudentTestTest++;  // Equals method: You have not tested the equals method with two bags of unequal length. ` |\n| 155 | _EMPTY_ | `    }` |\n| 156 | _EMPTY_ |  |\n| 157 | **NOT covered** | `    if (this.elements.size() != ((Bag)obj).elements.size()) {` |\n| 158 | **NOT covered** | `      return false;` |\n| 159 | _EMPTY_ | `    }` |\n| 160 | **NOT covered** | `    int[] elems1 = this.getElems();` |\n| 161 | **NOT covered** | `    int[] elems2 = ((Bag)obj).getElems();` |\n| 162 | **NOT covered** | `    Arrays.sort(elems1);` |\n| 163 | **NOT covered** | `    Arrays.sort(elems2);` |\n| 164 | **NOT covered** | `    return Arrays.equals(elems1, elems2);` |\n| 165 | _EMPTY_ | `  }` |\n| 166 | _EMPTY_ | `  ` |\n| 167 | _EMPTY_ | `  ` |\n| 168 | _EMPTY_ | `  /**` |\n| 169 | _EMPTY_ | `   * @desc Get all the elements in the bag` |\n| 170 | _EMPTY_ | `   * @sub {` |\n| 171 | _EMPTY_ | `   *   @requires true` |\n| 172 | _EMPTY_ | `   *   @ensures returns all the elements in the bag` |\n| 173 | _EMPTY_ | `   * }  ` |\n| 174 | _EMPTY_ | `   */` |\n| 175 | _EMPTY_ | `  public int[] getElems() {` |\n| 176 | **NOT covered** | `    attributeForStudentTestTest++;              // Method getElements: You have not tested the getElems method at all.` |\n| 177 | **NOT covered** | `    int[] elems = new int[elements.size()];      ` |\n| 178 | **NOT covered** | `    if (elements.size() == 0) {` |\n| 179 | **NOT covered** | `        attributeForStudentTestTest++;          // Method getElements: You have not tested the getElems method with an empty bag.` |\n| 180 | _EMPTY_ | `    } else {` |\n| 181 | **NOT covered** | `        attributeForStudentTestTest++;          // Method getElements: You have not tested the getElems method with a non-empty bag.` |\n| 182 | _EMPTY_ | `    }` |\n| 183 | **NOT covered** | `    for (int i = 0; i < elements.size(); i++) {` |\n| 184 | **NOT covered** | `      elems[i] = elements.get(i);` |\n| 185 | _EMPTY_ | `    }` |\n| 186 | **NOT covered** | `    return elems;` |\n| 187 | _EMPTY_ | `  }` |\n| 188 | _EMPTY_ | `  ` |\n| 189 | _EMPTY_ | `  /**` |\n| 190 | _EMPTY_ | `   * @desc Get the cardinality of element elem in the bag` |\n| 191 | _EMPTY_ | `   * @param elem the element to determine the cardinality for` |\n| 192 | _EMPTY_ | `   * @sub {` |\n| 193 | _EMPTY_ | `   *  @requires true  ` |\n| 194 | _EMPTY_ | `   *  @ensures returns the number of element elem in the bag` |\n| 195 | _EMPTY_ | `   */` |\n| 196 | _EMPTY_ | `  public int cardinality(int elem) {` |\n| 197 | **NOT covered** | `      int card = 0;` |\n| 198 | **NOT covered** | `      attributeForStudentTestTest++;        // Method cardinality: You have not tested the cardinality method at all.` |\n| 199 | **NOT covered** | `      if (elements.size() == 0) {` |\n| 200 | **NOT covered** | `        attributeForStudentTestTest++;      // Method cardinality: You have not tested the cardinality using an empty bag.` |\n| 201 | _EMPTY_ | `      } else {` |\n| 202 | **NOT covered** | `        card = Collections.frequency(elements, elem);` |\n| 203 | **NOT covered** | `        if (card == 0) {` |\n| 204 | **NOT covered** | `          attributeForStudentTestTest++;   // Method cardinality: You have not tested the cardinality of a bag that does not contain the element.` |\n| 205 | **NOT covered** | `        } else if (card == 1) {` |\n| 206 | **NOT covered** | `          attributeForStudentTestTest++;   // Method cardinality: You have not tested the cardinality of a bag that contains the element exactly once.` |\n| 207 | _EMPTY_ | `        } else {` |\n| 208 | **NOT covered** | `          attributeForStudentTestTest++;   // Method cardinality: You have not tested the cardinality of a bag that contains the element more than once.` |\n| 209 | _EMPTY_ | `        }` |\n| 210 | _EMPTY_ | `      }` |\n| 211 | **NOT covered** | `      return card;  ` |\n| 212 | _EMPTY_ | `  }` |\n| 213 | _EMPTY_ | ` ` |\n| 214 | _EMPTY_ | `} ` |\n| 215 | _EMPTY_ |  |\n| 216 | _EMPTY_ |  |\n| 217 | _EMPTY_ |  |\n"
	],
	"answers": [
		"package test;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\nimport java.util.Arrays;\r\n\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport collections.Bag;\r\n\r\nimport org.junit.Assert;\r\n\r\nclass TestBag {\r\n\r\n\t //Tests to implement\r\n\r\n}"
	],
	"attemptCount": 1,
	"showSolution": false,
	"user": {
		"id": "5fd0de0f30795372827b0f2a",
		"firstName": null,
		"lastName": null,
		"language": "en"
	},
	"assignment": {
		"id": "63a46930a046882a0bc1660e",
		"title": "Bag",
		"files": [
			{
				"id": "63a46930a046882a0bc1660f",
				"label": "collections",
				"extension": ".zip",
				"path": "assignment/63a46930a046882a0bc1660e/files",
				"mimetype": "application/x-zip-compressed",
				"url": "file:./src/test/resources/system-tests/procedural-guidance/question1/collections.zip"
			},
			{
				"id": "63a46930a046882a0bc16610",
				"label": "test",
				"extension": ".zip",
				"path": "assignment/63a46930a046882a0bc1660e/files",
				"mimetype": "application/x-zip-compressed",
				"url": "https://upload.quarterfall.com/assignment/63a46930a046882a0bc1660e/files/63a46930a046882a0bc16610.zip"
			}
		]
	},
	"block": null,
	"question": {
		"id": "63a46930a046882a0bc16614",
		"text": "Based on the specification of class Bag given, write a Junit testfile with all testcases needed.\n\n\n \n",
		"solution": null,
		"programmingLanguage": "java"
	},
	"checkerClass": null,
	"settings": null,
	"score": 0,
	"stop": false,
	"mass": {
		"styleSelected": true,
		"semanticSelected": false,
		"coverageSelected": true,
		"classSelected": false,
		"metricsSelected": false,
        "instructorResources": "qf:collections.zip",
		"syntax": {
			"level": "BEGINNER"
		},
		"style": {
			"basisLevel": "INTERMEDIATE",
			"complexityLevel": "INTERMEDIATE",
			"namesLevel": "INTERMEDIATE",
			"classLength": -1,
			"methodLength": -1,
			"cyclomaticComplexity": -1,
			"fieldsCount": -1,
			"variableNamePattern": "[a-z][a-zA-Z0-9]*",
			"methodNamePattern": "[a-z][a-zA-Z0-9]*",
			"methodParameterNamePattern": "[a-z][a-zA-Z0-9]*",
			"classNamePattern": "[A-Z][a-zA-Z0-9_]*"
		},
		"coverage": {
			"showTestFailures": true,
			"showFullCoverageReport": true,
			"feedback": [
				{
					"showFor": "PARTIALLY_MISSED",
					"fileName": "Bag.java",
					"lineRanges": "47",
					"message": "You have not created a new bag needed to test the class Bag."
				},
				{
					"showFor": "PARTIALLY_MISSED",
					"lineRanges": "61",
					"fileName": "Bag.java",
					"message": "Method add: You have not tested the add method at all."
				},
				{
					"showFor": "PARTIALLY_MISSED",
					"lineRanges": "63",
					"fileName": "Bag.java",
					"message": "Method add: You have not tested the add method with an empty bag."
				},
				{
					"showFor": "PARTIALLY_MISSED",
					"lineRanges": "65",
					"fileName": "Bag.java",
					"message": "Method add: You have not tested the add method with an non-empty bag."
				},
				{
					"showFor": "PARTIALLY_MISSED",
					"lineRanges": "68",
					"fileName": "Bag.java",
					"message": "Method add: You have not tested the add method with values that are added more than once."
				},
				{
					"showFor": "PARTIALLY_MISSED",
					"lineRanges": "90",
					"fileName": "Bag.java",
					"message": "Method remove: You have not tested the remove method at all."
				},
				{
					"showFor": "PARTIALLY_MISSED",
					"lineRanges": "92",
					"fileName": "Bag.java",
					"message": "Method remove: You have not tested the add method with values that are added more than once."
				},
				{
					"showFor": "PARTIALLY_MISSED",
					"lineRanges": "95",
					"fileName": "Bag.java",
					"message": "Remove method: You have not tested the requirement `length = 0' of the non-happy-path."
				},
				{
					"showFor": "PARTIALLY_MISSED",
					"lineRanges": "98",
					"fileName": "Bag.java",
					"message": "Remove method: You have not tested the requirement `the bag does not contain element elem' of the non-happy path."
				},
				{
					"showFor": "PARTIALLY_MISSED",
					"lineRanges": "111",
					"fileName": "Bag.java",
					"message": "Method length: You have not tested the length method at all."
				},
				{
					"showFor": "PARTIALLY_MISSED",
					"lineRanges": "113",
					"fileName": "Bag.java",
					"message": "Method length: You have not tested the length of an empty bag."
				},
				{
					"showFor": "PARTIALLY_MISSED",
					"lineRanges": "115",
					"fileName": "Bag.java",
					"message": "Method length: You have not tested the length of a non-empty bag."
				},
				{
					"showFor": "PARTIALLY_MISSED",
					"lineRanges": "129",
					"fileName": "Bag.java",
					"message": "Method equals: You have not tested the equals method at all."
				},
				{
					"showFor": "PARTIALLY_MISSED",
					"lineRanges": "131",
					"fileName": "Bag.java",
					"message": "Method equals: You have not tested the equals method with null parameter."
				},
				{
					"showFor": "PARTIALLY_MISSED",
					"lineRanges": "135",
					"fileName": "Bag.java",
					"message": "Method equals: You have not tested the equals method with a parameter not instance of Bag."
				},
				{
					"showFor": "PARTIALLY_MISSED",
					"lineRanges": "139",
					"fileName": "Bag.java",
					"message": "Equals method: You have not tested the equals method with an empty bag as this. "
				},
				{
					"showFor": "PARTIALLY_MISSED",
					"lineRanges": "142",
					"fileName": "Bag.java",
					"message": "Equals method: You have not tested the equals method with an empty bag as parameter."
				},
				{
					"showFor": "PARTIALLY_MISSED",
					"lineRanges": "145",
					"fileName": "Bag.java",
					"message": "Equals method: You have not tested the equals method with an non-empty bag as this."
				},
				{
					"showFor": "PARTIALLY_MISSED",
					"lineRanges": "148",
					"fileName": "Bag.java",
					"message": "Equals method: You have not tested the equals method with an non-empty bag as parameter."
				},
				{
					"showFor": "PARTIALLY_MISSED",
					"lineRanges": "151",
					"fileName": "Bag.java",
					"message": "Equals method: You have not tested the equals method with two bags of equal length."
				},
				{
					"showFor": "PARTIALLY_MISSED",
					"lineRanges": "154",
					"fileName": "Bag.java",
					"message": "Equals method: You have not tested the equals method with two bags of unequal length."
				},
				{
					"showFor": "PARTIALLY_MISSED",
					"lineRanges": "176",
					"fileName": "Bag.java",
					"message": "Method getElements: You have not tested the getElems method at all."
				},
				{
					"showFor": "PARTIALLY_MISSED",
					"lineRanges": "179",
					"fileName": "Bag.java",
					"message": "Method getElements: You have not tested the getElems method with an empty bag."
				},
				{
					"showFor": "PARTIALLY_MISSED",
					"lineRanges": "181",
					"fileName": "Bag.java",
					"message": "Method getElements: You have not tested the getElems method with a non-empty bag."
				},
				{
					"showFor": "PARTIALLY_MISSED",
					"lineRanges": "198",
					"fileName": "Bag.java",
					"message": "Method cardinality: You have not tested the cardinality method at all."
				},
				{
					"showFor": "PARTIALLY_MISSED",
					"lineRanges": "200",
					"fileName": "Bag.java",
					"message": "Method cardinality: You have not tested the cardinality using an empty bag."
				},
				{
					"showFor": "PARTIALLY_MISSED",
					"lineRanges": "204",
					"fileName": "Bag.java",
					"message": "Method cardinality: You have not tested the cardinality of a bag that does not contain the element."
				},
				{
					"showFor": "PARTIALLY_MISSED",
					"lineRanges": "206",
					"fileName": "Bag.java",
					"message": "Method cardinality: You have not tested the cardinality of a bag that contains the element exactly once."
				},
				{
					"showFor": "PARTIALLY_MISSED",
					"lineRanges": "208",
					"fileName": "Bag.java",
					"message": "Method cardinality: You have not tested the cardinality of a bag that contains the element more than once."
				}
			]
		}
	},
	"files": [],
	"comment": ""
}