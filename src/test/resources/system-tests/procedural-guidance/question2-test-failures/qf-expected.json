{
  "answer" : "package collections;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collections;\r\n\r\n/**\r\n * This class represents a bag of integers. A bag can contain duplicate elements.\r\n * The bag is not limited in the number of elements it can hold.\r\n * The number of elements in the bag is represented by its length. \r\n\r\n * External invariant:\r\n * @inv Number of elements >= 0\r\n */\r\n\r\npublic class Bag {\r\n \r\n // Internal invariant\r\n // @inv elementen.size() >= 0 \r\n private ArrayList<Integer> elements;\r\n \r\n\r\n /**\r\n * @desc Constructor \r\n * @sub Happy path {\r\n * @requires true\r\n * @ensures A new bag is instantiated, with length = 0. \r\n * }\r\n */\r\n public Bag() {\r\n\t // TODO\r\n }\r\n \r\n /**\r\n * @desc add an elem to the bag\r\n * @param elem the element to add \r\n * @sub happy path {\r\n * @requires true\r\n * @ensures new cardinality(eleml) = old cardinality(elem) + 1\r\n * @ensures the new length of the bag is the old length plus 1\r\n * @ensures returns true \r\n * }\r\n */\r\n public boolean add(int elem) {\r\n\t // TODO\r\n return false;\r\n }\r\n \r\n /**\r\n * @desc Remove elemet elem from the bag\r\n * @param elem the element to remove\r\n * @sub Happy-path {\r\n * @requires length > 0 and the bag contains n elements of elem, with n > 0\r\n * @ensures new cardinality(elem) = old cardinality(elem) - 1\r\n * @ensures length is old length minus 1\r\n * @ensures returns true\r\n * }\r\n * @sub Non-happy-path {\r\n * @requires length = 0 or the bag does not contain element elem\r\n * @ensures the bag is not changed\r\n * @ensures length is old length\r\n * @ensures returns false\r\n * }\r\n */\r\n public boolean remove(int elem) {\r\n\t // TODO\r\n return false;\r\n }\r\n \r\n /**\r\n * @desc Return the number of elements in the bag\r\n * @sub {\r\n * @requires true \r\n * @ensures returns the number of elements\r\n * } \r\n */\r\n public int length() {\r\n\t // TODO\r\n return -1;\r\n } \r\n \r\n /**\r\n * @desc Determine if this bag contains exactly the same elements as bag obj.\r\n * @param obj the other bag \r\n * @sub {\r\n * @requires true\r\n * @ensures true if they contain the same elements otherwise false\r\n * } \r\n */\r\n public boolean equals(Object obj) {\r\n\t // TODO\r\n return false;\r\n }\r\n \r\n \r\n /**\r\n * @desc Get all the elements in the bag\r\n * @sub {\r\n * @requires true\r\n * @ensures returns all the elements in the bag\r\n * } \r\n */\r\n public int[] getElems() {\r\n\t // TODO\r\n return new int[0];\r\n }\r\n \r\n /**\r\n * @desc Get the cardinality of element elem in the bag\r\n * @param elem the element to determine the cardinality for\r\n * @sub {\r\n * @requires true \r\n * @ensures returns the number of element elem in the bag\r\n */\r\n public int cardinality(int elem) {\r\n\t // TODO\r\n return -1;\r\n }\r\n \r\n} ",
  "feedback" : [ "# Your Feedback\n", "## Coverage feedbacks", "Test failed: test.TestBag.testEqualsEqualLength() - testEqualsEqualLength()\n```\norg.opentest4j.AssertionFailedError: Equals same objects ==> expected: <true> but was: <false>\n  at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)\n  at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)\n  at org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)\n  at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)\n  at org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:211)\n  ...\n```", "Test failed: test.TestBag.testEqualsEmpty() - testEqualsEmpty()\n```\norg.opentest4j.AssertionFailedError: Equals with both empty bags ==> expected: <true> but was: <false>\n  at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)\n  at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)\n  at org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)\n  at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)\n  at org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:211)\n  ...\n```", "Test failed: test.TestBag.testAddToEmptyBag() - testAddToEmptyBag()\n```\norg.opentest4j.AssertionFailedError: expected: <1> but was: <-1>\n  at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)\n  at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)\n  at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)\n  at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)\n  at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)\n  ...\n```", "Test failed: test.TestBag.testCardinalityFilledBagMOre() - testCardinalityFilledBagMOre()\n```\norg.opentest4j.AssertionFailedError: Cardinality of element in a bag ==> expected: <3> but was: <-1>\n  at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)\n  at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)\n  at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)\n  at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)\n  at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:560)\n  ...\n```", "Test failed: test.TestBag.testCardinalityFilledBagZero() - testCardinalityFilledBagZero()\n```\norg.opentest4j.AssertionFailedError: Cardinality of element not occuring in a bag ==> expected: <0> but was: <-1>\n  at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)\n  at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)\n  at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)\n  at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)\n  at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:560)\n  ...\n```", "Test failed: test.TestBag.testRemoveHappyPath() - testRemoveHappyPath()\n```\norg.opentest4j.AssertionFailedError: expected: <0> but was: <-1>\n  at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)\n  at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)\n  at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)\n  at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)\n  at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)\n  ...\n```", "Test failed: test.TestBag.testRemoveNonHappyPath() - testRemoveNonHappyPath()\n```\norg.opentest4j.AssertionFailedError: The new length is the old (= 0) ==> expected: <0> but was: <-1>\n  at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)\n  at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)\n  at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)\n  at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)\n  at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:560)\n  ...\n```", "Test failed: test.TestBag.testCardinalityFilledBagOne() - testCardinalityFilledBagOne()\n```\norg.opentest4j.AssertionFailedError: Cardinality of element occuring once in a bag ==> expected: <1> but was: <-1>\n  at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)\n  at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)\n  at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)\n  at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)\n  at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:560)\n  ...\n```", "Test failed: test.TestBag.testCardinalityEmptyBag() - testCardinalityEmptyBag()\n```\norg.opentest4j.AssertionFailedError: Cardinality of element in an empty bag ==> expected: <0> but was: <-1>\n  at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)\n  at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)\n  at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)\n  at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)\n  at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:560)\n  ...\n```", "Test failed: test.TestBag.testGetElemsFilled() - testGetElemsFilled()\n```\norg.opentest4j.AssertionFailedError: getElems on non-empty bag ==> array lengths differ, expected: <10> but was: <0>\n  at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)\n  at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)\n  at org.junit.jupiter.api.AssertArrayEquals.assertArraysHaveSameLength(AssertArrayEquals.java:428)\n  at org.junit.jupiter.api.AssertArrayEquals.assertArrayEquals(AssertArrayEquals.java:237)\n  at org.junit.jupiter.api.AssertArrayEquals.assertArrayEquals(AssertArrayEquals.java:87)\n  ...\n```", "Test failed: test.TestBag.testAddToNonEmptyBag() - testAddToNonEmptyBag()\n```\norg.opentest4j.AssertionFailedError: expected: <3> but was: <-1>\n  at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)\n  at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)\n  at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)\n  at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)\n  at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:145)\n  ...\n```", "Test failed: test.TestBag.testEmptyBag() - testEmptyBag()\n```\norg.opentest4j.AssertionFailedError: Length empty bag is 0 ==> expected: <0> but was: <-1>\n  at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)\n  at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)\n  at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)\n  at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)\n  at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:560)\n  ...\n```" ],
  "answers" : [ "package collections;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collections;\r\n\r\n/**\r\n * This class represents a bag of integers. A bag can contain duplicate elements.\r\n * The bag is not limited in the number of elements it can hold.\r\n * The number of elements in the bag is represented by its length. \r\n\r\n * External invariant:\r\n * @inv Number of elements >= 0\r\n */\r\n\r\npublic class Bag {\r\n \r\n // Internal invariant\r\n // @inv elementen.size() >= 0 \r\n private ArrayList<Integer> elements;\r\n \r\n\r\n /**\r\n * @desc Constructor \r\n * @sub Happy path {\r\n * @requires true\r\n * @ensures A new bag is instantiated, with length = 0. \r\n * }\r\n */\r\n public Bag() {\r\n\t // TODO\r\n }\r\n \r\n /**\r\n * @desc add an elem to the bag\r\n * @param elem the element to add \r\n * @sub happy path {\r\n * @requires true\r\n * @ensures new cardinality(eleml) = old cardinality(elem) + 1\r\n * @ensures the new length of the bag is the old length plus 1\r\n * @ensures returns true \r\n * }\r\n */\r\n public boolean add(int elem) {\r\n\t // TODO\r\n return false;\r\n }\r\n \r\n /**\r\n * @desc Remove elemet elem from the bag\r\n * @param elem the element to remove\r\n * @sub Happy-path {\r\n * @requires length > 0 and the bag contains n elements of elem, with n > 0\r\n * @ensures new cardinality(elem) = old cardinality(elem) - 1\r\n * @ensures length is old length minus 1\r\n * @ensures returns true\r\n * }\r\n * @sub Non-happy-path {\r\n * @requires length = 0 or the bag does not contain element elem\r\n * @ensures the bag is not changed\r\n * @ensures length is old length\r\n * @ensures returns false\r\n * }\r\n */\r\n public boolean remove(int elem) {\r\n\t // TODO\r\n return false;\r\n }\r\n \r\n /**\r\n * @desc Return the number of elements in the bag\r\n * @sub {\r\n * @requires true \r\n * @ensures returns the number of elements\r\n * } \r\n */\r\n public int length() {\r\n\t // TODO\r\n return -1;\r\n } \r\n \r\n /**\r\n * @desc Determine if this bag contains exactly the same elements as bag obj.\r\n * @param obj the other bag \r\n * @sub {\r\n * @requires true\r\n * @ensures true if they contain the same elements otherwise false\r\n * } \r\n */\r\n public boolean equals(Object obj) {\r\n\t // TODO\r\n return false;\r\n }\r\n \r\n \r\n /**\r\n * @desc Get all the elements in the bag\r\n * @sub {\r\n * @requires true\r\n * @ensures returns all the elements in the bag\r\n * } \r\n */\r\n public int[] getElems() {\r\n\t // TODO\r\n return new int[0];\r\n }\r\n \r\n /**\r\n * @desc Get the cardinality of element elem in the bag\r\n * @param elem the element to determine the cardinality for\r\n * @sub {\r\n * @requires true \r\n * @ensures returns the number of element elem in the bag\r\n */\r\n public int cardinality(int elem) {\r\n\t // TODO\r\n return -1;\r\n }\r\n \r\n} " ],
  "attemptCount" : 1,
  "showSolution" : false,
  "user" : {
    "id" : "5fd0de0f30795372827b0f2a",
    "firstName" : null,
    "lastName" : null,
    "language" : "en"
  },
  "assignment" : {
    "id" : "63a46930a046882a0bc1660e",
    "title" : "Bag",
    "files" : [ {
      "id" : "63a46930a046882a0bc1660f",
      "label" : "collections",
      "extension" : ".zip",
      "path" : "assignment/63a46930a046882a0bc1660e/files",
      "mimetype" : "application/x-zip-compressed",
      "url" : "https://upload.quarterfall.com/assignment/63a46930a046882a0bc1660e/files/63a46930a046882a0bc1660f.zip"
    }, {
      "id" : "63a46930a046882a0bc16610",
      "label" : "test",
      "extension" : ".zip",
      "path" : "assignment/63a46930a046882a0bc1660e/files",
      "mimetype" : "application/x-zip-compressed",
      "url" : "file:./src/test/resources/system-tests/procedural-guidance/question2-test-failures/test.zip"
    } ]
  },
  "block" : null,
  "question" : {
    "id" : "63a46930a046882a0bc16615",
    "text" : "Based on the specification of class Bag, implement all the methods. Below you find a building stone you can use as starting point.",
    "solution" : null,
    "programmingLanguage" : "java"
  },
  "checkerClass" : null,
  "settings" : null,
  "score" : 0,
  "stop" : false,
  "mass" : {
    "instructorResources" : "qf:test.zip",
    "styleSelected" : true,
    "semanticSelected" : false,
    "coverageSelected" : true,
    "classSelected" : false,
    "metricsSelected" : false,
    "syntax" : {
      "level" : "BEGINNER"
    },
    "coverage" : {
      "feedback" : [ ],
      "showTestFailures" : true,
      "showFullCoverageReport" : false
    },
    "style" : {
      "basisLevel" : "INTERMEDIATE",
      "complexityLevel" : "BEGINNER",
      "namesLevel" : "BEGINNER",
      "classLength" : -1,
      "methodLength" : -1,
      "cyclomaticComplexity" : -1,
      "fieldsCount" : -1,
      "variableNamePattern" : "[a-z][a-zA-Z0-9]*",
      "methodNamePattern" : "[a-z][a-zA-Z0-9]*",
      "methodParameterNamePattern" : "[a-z][a-zA-Z0-9]*",
      "classNamePattern" : "[A-Z][a-zA-Z0-9_]*"
    }
  },
  "files" : [ ],
  "comment" : ""
}